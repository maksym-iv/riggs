// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/riggs.proto

package riggs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IPReq struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPReq) Reset()         { *m = IPReq{} }
func (m *IPReq) String() string { return proto.CompactTextString(m) }
func (*IPReq) ProtoMessage()    {}
func (*IPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d14231dc608bbd4, []int{0}
}

func (m *IPReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPReq.Unmarshal(m, b)
}
func (m *IPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPReq.Marshal(b, m, deterministic)
}
func (m *IPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPReq.Merge(m, src)
}
func (m *IPReq) XXX_Size() int {
	return xxx_messageInfo_IPReq.Size(m)
}
func (m *IPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IPReq.DiscardUnknown(m)
}

var xxx_messageInfo_IPReq proto.InternalMessageInfo

func (m *IPReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type GeoResp struct {
	CountryCode          string   `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	CountryName          string   `protobuf:"bytes,2,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	City                 string   `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	Postal               string   `protobuf:"bytes,4,opt,name=postal,proto3" json:"postal,omitempty"`
	Latitude             string   `protobuf:"bytes,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            string   `protobuf:"bytes,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	IPv4                 string   `protobuf:"bytes,7,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	State                string   `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoResp) Reset()         { *m = GeoResp{} }
func (m *GeoResp) String() string { return proto.CompactTextString(m) }
func (*GeoResp) ProtoMessage()    {}
func (*GeoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d14231dc608bbd4, []int{1}
}

func (m *GeoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoResp.Unmarshal(m, b)
}
func (m *GeoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoResp.Marshal(b, m, deterministic)
}
func (m *GeoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoResp.Merge(m, src)
}
func (m *GeoResp) XXX_Size() int {
	return xxx_messageInfo_GeoResp.Size(m)
}
func (m *GeoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GeoResp proto.InternalMessageInfo

func (m *GeoResp) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GeoResp) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *GeoResp) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *GeoResp) GetPostal() string {
	if m != nil {
		return m.Postal
	}
	return ""
}

func (m *GeoResp) GetLatitude() string {
	if m != nil {
		return m.Latitude
	}
	return ""
}

func (m *GeoResp) GetLongitude() string {
	if m != nil {
		return m.Longitude
	}
	return ""
}

func (m *GeoResp) GetIPv4() string {
	if m != nil {
		return m.IPv4
	}
	return ""
}

func (m *GeoResp) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type MorseCode struct {
	In                   string   `protobuf:"bytes,1,opt,name=in,proto3" json:"in,omitempty"`
	Out                  string   `protobuf:"bytes,2,opt,name=out,proto3" json:"out,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MorseCode) Reset()         { *m = MorseCode{} }
func (m *MorseCode) String() string { return proto.CompactTextString(m) }
func (*MorseCode) ProtoMessage()    {}
func (*MorseCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d14231dc608bbd4, []int{2}
}

func (m *MorseCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MorseCode.Unmarshal(m, b)
}
func (m *MorseCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MorseCode.Marshal(b, m, deterministic)
}
func (m *MorseCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MorseCode.Merge(m, src)
}
func (m *MorseCode) XXX_Size() int {
	return xxx_messageInfo_MorseCode.Size(m)
}
func (m *MorseCode) XXX_DiscardUnknown() {
	xxx_messageInfo_MorseCode.DiscardUnknown(m)
}

var xxx_messageInfo_MorseCode proto.InternalMessageInfo

func (m *MorseCode) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

func (m *MorseCode) GetOut() string {
	if m != nil {
		return m.Out
	}
	return ""
}

func init() {
	proto.RegisterType((*IPReq)(nil), "riggs.IPReq")
	proto.RegisterType((*GeoResp)(nil), "riggs.GeoResp")
	proto.RegisterType((*MorseCode)(nil), "riggs.MorseCode")
}

func init() { proto.RegisterFile("pb/riggs.proto", fileDescriptor_9d14231dc608bbd4) }

var fileDescriptor_9d14231dc608bbd4 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0x4d, 0x4b, 0xb5, 0x40,
	0x14, 0xe6, 0x7e, 0xf8, 0x75, 0xee, 0x45, 0x2e, 0x87, 0x97, 0xb7, 0x41, 0x5a, 0x94, 0x8b, 0x68,
	0xd3, 0x8d, 0xac, 0x65, 0xbb, 0x16, 0xe2, 0xa2, 0x10, 0x69, 0x1f, 0x5e, 0x3d, 0xc9, 0x80, 0xd7,
	0x99, 0x74, 0x8c, 0xfc, 0xb5, 0xfd, 0x95, 0x70, 0x1c, 0xac, 0x68, 0xf7, 0x7c, 0xc1, 0x99, 0xe7,
	0x19, 0xf0, 0xe5, 0xe1, 0xba, 0xe5, 0x55, 0xd5, 0xed, 0x65, 0x2b, 0x94, 0x40, 0x4b, 0x93, 0xf0,
	0x04, 0xac, 0x24, 0xcd, 0xe8, 0x0d, 0x7d, 0x58, 0x72, 0xc9, 0x16, 0x67, 0x8b, 0x4b, 0x2f, 0x5b,
	0x72, 0x19, 0x7e, 0x2e, 0xc0, 0x89, 0x49, 0x64, 0xd4, 0x49, 0x3c, 0x87, 0x6d, 0x21, 0xfa, 0x46,
	0xb5, 0xc3, 0x4b, 0x21, 0x4a, 0x32, 0xa9, 0x8d, 0xd1, 0x1e, 0x44, 0x49, 0x3f, 0x23, 0x4d, 0x7e,
	0x24, 0xb6, 0xfc, 0x15, 0x79, 0xca, 0x8f, 0x84, 0x08, 0xeb, 0x82, 0xab, 0x81, 0xad, 0xb4, 0xa5,
	0x31, 0xfe, 0x07, 0x5b, 0x8a, 0x4e, 0xe5, 0x35, 0x5b, 0x6b, 0xd5, 0x30, 0x0c, 0xc0, 0xad, 0x73,
	0xc5, 0x55, 0x5f, 0x12, 0xb3, 0xb4, 0x33, 0x73, 0x3c, 0x05, 0xaf, 0x16, 0x4d, 0x35, 0x99, 0xb6,
	0x36, 0xbf, 0x85, 0xf1, 0x4a, 0x92, 0xbe, 0xdf, 0x31, 0x67, 0xba, 0x32, 0x62, 0xfc, 0x07, 0x56,
	0xa7, 0x72, 0x45, 0xcc, 0xd5, 0xe2, 0x44, 0xc2, 0x2b, 0xf0, 0x1e, 0x45, 0xdb, 0x91, 0x7e, 0xff,
	0x58, 0xbf, 0x99, 0xeb, 0x37, 0xb8, 0x83, 0x95, 0xe8, 0x95, 0xa9, 0x31, 0xc2, 0x28, 0x02, 0x37,
	0x49, 0x63, 0x52, 0x31, 0x09, 0xbc, 0x00, 0xdb, 0xa0, 0xed, 0x7e, 0x1a, 0x55, 0x8f, 0x18, 0xf8,
	0x86, 0x99, 0xe1, 0xa2, 0x7b, 0x70, 0xc6, 0x13, 0xfc, 0x75, 0xc0, 0x1b, 0xd8, 0x18, 0xf8, 0x4c,
	0x1f, 0x0a, 0x77, 0x26, 0x39, 0xbf, 0x20, 0xf8, 0xa3, 0x1c, 0x6c, 0xfd, 0x53, 0xb7, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x01, 0x9d, 0xec, 0x0a, 0xbb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IPGetGeoClient is the client API for IPGetGeo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPGetGeoClient interface {
	GetGeo(ctx context.Context, in *IPReq, opts ...grpc.CallOption) (*GeoResp, error)
}

type iPGetGeoClient struct {
	cc *grpc.ClientConn
}

func NewIPGetGeoClient(cc *grpc.ClientConn) IPGetGeoClient {
	return &iPGetGeoClient{cc}
}

func (c *iPGetGeoClient) GetGeo(ctx context.Context, in *IPReq, opts ...grpc.CallOption) (*GeoResp, error) {
	out := new(GeoResp)
	err := c.cc.Invoke(ctx, "/riggs.IPGetGeo/GetGeo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPGetGeoServer is the server API for IPGetGeo service.
type IPGetGeoServer interface {
	GetGeo(context.Context, *IPReq) (*GeoResp, error)
}

// UnimplementedIPGetGeoServer can be embedded to have forward compatible implementations.
type UnimplementedIPGetGeoServer struct {
}

func (*UnimplementedIPGetGeoServer) GetGeo(ctx context.Context, req *IPReq) (*GeoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeo not implemented")
}

func RegisterIPGetGeoServer(s *grpc.Server, srv IPGetGeoServer) {
	s.RegisterService(&_IPGetGeo_serviceDesc, srv)
}

func _IPGetGeo_GetGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPGetGeoServer).GetGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riggs.IPGetGeo/GetGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPGetGeoServer).GetGeo(ctx, req.(*IPReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPGetGeo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "riggs.IPGetGeo",
	HandlerType: (*IPGetGeoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGeo",
			Handler:    _IPGetGeo_GetGeo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/riggs.proto",
}

// MorsifyClient is the client API for Morsify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MorsifyClient interface {
	MorsifyText(ctx context.Context, in *MorseCode, opts ...grpc.CallOption) (*MorseCode, error)
}

type morsifyClient struct {
	cc *grpc.ClientConn
}

func NewMorsifyClient(cc *grpc.ClientConn) MorsifyClient {
	return &morsifyClient{cc}
}

func (c *morsifyClient) MorsifyText(ctx context.Context, in *MorseCode, opts ...grpc.CallOption) (*MorseCode, error) {
	out := new(MorseCode)
	err := c.cc.Invoke(ctx, "/riggs.Morsify/MorsifyText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MorsifyServer is the server API for Morsify service.
type MorsifyServer interface {
	MorsifyText(context.Context, *MorseCode) (*MorseCode, error)
}

// UnimplementedMorsifyServer can be embedded to have forward compatible implementations.
type UnimplementedMorsifyServer struct {
}

func (*UnimplementedMorsifyServer) MorsifyText(ctx context.Context, req *MorseCode) (*MorseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MorsifyText not implemented")
}

func RegisterMorsifyServer(s *grpc.Server, srv MorsifyServer) {
	s.RegisterService(&_Morsify_serviceDesc, srv)
}

func _Morsify_MorsifyText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MorseCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MorsifyServer).MorsifyText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riggs.Morsify/MorsifyText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MorsifyServer).MorsifyText(ctx, req.(*MorseCode))
	}
	return interceptor(ctx, in, info, handler)
}

var _Morsify_serviceDesc = grpc.ServiceDesc{
	ServiceName: "riggs.Morsify",
	HandlerType: (*MorsifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MorsifyText",
			Handler:    _Morsify_MorsifyText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/riggs.proto",
}
